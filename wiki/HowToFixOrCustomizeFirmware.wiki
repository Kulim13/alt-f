#summary How to fix or customize the firmware for your needs

= This is an *advanced* topic that might cause more distress than benefice =

== Introduction ==

Alt-F loads from flash, which makes difficult change it when something is not OK or is not suited to your needs. Generally you have to wait for a new version that fixes the problem.

On a normal disk-based linux distribution, you can just edit a file and it will survive reboots, as it resides on disk.

On Alt-F, by contrary, any change will be lost in the next reboot.
The exception is a set of well defined files, the "Settings", that are saved in flash memory and loaded on the next reboot (or on demand), and that overrides the defaults.

But there is a way to make permanent on-disk changes to any file, be it a configuration or an executable file.

== Details ==

When an Alt-F package is installed, a directory named Alt-F will be created on the root of the filesystem of your choice, e.g. /mnt/sda2/Alt-F, and a link to it will be created in the root, /Alt-F. The package files will reside in that directory and will *shadow* any file in the normal root filesystem.
I.e, if a file named usr/sbin/loadsave_settings exists in that directory, it will shadow, i.e. override, the firmware distributed /usr/sbin/loadsave_settings file.

So you can fix or customize Alt-F by putting any file there.

*BUT THERE ARE RULES ON HOWTO TO DO IT, OTHERWISE THE SYSTEM MIGHT CRASH.*

  # Start by installing an Alt-F package, the ipkg package will be enough.
  # At the command line type `aufs.sh -u` # unmount aufs (`*`)
  # Add or change the file of your choice to the /Alt-F hierarchy
  # At the command line type `aufs.sh -m` # mount aufs (`*`)

The new file will appear under the usual / (root) hierarchy, as if it belongs to the normal firmware, and if it has the same name as one of the firmware files, it will *override* it.

As an example, a bug has been reported for 0.1B5: the /usr/sbin/loadsave_settings file missed to save /etc/exports in flash. The issue is already fixed for 0.1B6, but users don't have to wait until it is release, they can fix the issue it right now:

  # `aufs.sh -u`
  # `cp /usr/sbin/loadsave_settings /Alt-F/usr/sbin/loadsave_settings`
  # edit `/Alt-F/usr/sbin/loadsave_settings` and at around line 290 add `/etc/exports` to the list of files that the variable named `files` hold. You must know what you are doing!!!
  # `aufs.sh -m`

Et voil√°!
If `loadsave_settings -sf` is executed, the `/etc/exports` file will be saves to flash and loaded on the next reboot (or when `loadsave_settings -lf` is executed)

If you make a mistake, repeat steps 1-4 above, but in step 2 use `rm /Alt-F/usr/sbin/loadsave_settings`

If you can't fix the mistake as in above, you have to remove the disk and remove the offending file from other computer.

*DON'T, BUT DON'T*, add, remove or edit any file under /Alt-F (or under /mnt/sdxx/Alt-F) without executing steps 1 and 4!

== Alternative ==

There is however an alternative of the above procedure.

  * -At the command line type `aufs.sh -n` # remount aufs with fsnotify
  * -Manipulate files in /Alt-F/...
  * -At the command line type `aufs.sh -r` # remount aufs with reval

Mounting aufs with 'fsnotify' enables you to manipulates files in /Alt-F/ directly, without unmounting aufs, but it has performance issues under normal work, so don't forget to remount with 'reval' as soon as your changes are made.

== Problems ==

The existence of the /Alt-F directory has some undesirable and not obvious effects that turns me nuts from time to time -- removing this facility has been seriously considered more than once.

The most notorious problem is that new files created in a directory which is being shadowed in disk, will be created on disk. Changing files in the shadowed directory, depending on the way they are saved, might end-up moving them to disk. Deleting a shadowed file seems to delete it, but only marks it for deletion, and it might reappear latter after a reboot while aufs is not yet mounted.

Because of this and other behavior, all setting files are copied to disk when aufs is mounted and copied back to memory when aufs is unmounted.

Also, there might exist problems with disk spindown, because some server process update files while they run, and if the updated files are being shadowed the disk will be spin-up.


Hope this help more that create problems!

*Don't send bug reports or fill any issues* if you made changes to any system file this way!

See http://lwn.net/Articles/324291/, http://lwn.net/Articles/325369/,  http://lwn.net/Articles/327738/ for further detail.